var tipuesearch = {"pages": [{'title': 'Week', 'text': 'week2-5 \n week6-9 \n week10-14 \n week15-18 \n', 'tags': '', 'url': 'Week.html'}, {'title': 'week2-5', 'text': 'week2 \n 1.進行課程前比須先到Github網站創建課程所需倉儲(cad2019). \n 2.下載課程網站上老師提供的可攜系統(2b)(201906_fall). \n 3.先將自己的倉儲使用git clone複製到自己的隨身硬碟中. \n 4.使用git submodule add  https://github.com/mdecourse/cmsimde.git \xa0cmsimde的指新增cmsimde(近端的模組)，讓近端能使用. \n 5.到老師的201906_fall的up_dir下載近端靜態網站的的模組讓靜態網站能夠使用. \n 6.將倉儲(cad2019)中所有的文件使用git add .的指令添加到Github倉儲中，在使用git commit編輯新增的所有文件. \n 7.使用git push將文件推送到遠端. \n 8.創建自己倉儲完成與網站完成. \n \n week3 \n 1.到下載的201906_fall的資料夾中的data>tmp>solvespace>exlib>angle>CMakeLists找到713，714行最前面加上井字號. \n 2.回到exlib的資料夾在python上操作 cd libpng>cd build>然後下cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release (在libpng做出MinGW的格式與檢查系統有的文件) \n 3.在build的資料夾下mingw32-make(進行 libpng.dll.a 的編譯) \n 4.編譯完成後找到libpng.dll.a\xa0並並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即201906_fall的 msys64\\mingw64\\lib 目錄) \n 5.回到solvespace的資料夾cd build進入build的資料夾，執行cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release與mingw32-make的指令 \n 6.指令完成後就可以開啟solvespace.exe執行solvespace \n \n week4 \n 進度暫停一周，把前面的進度補上 \n week5 \n 1.進入課程網站的的Task1的solvespace操作觀看影片並練習 \n \n', 'tags': '', 'url': 'week2-5.html'}, {'title': 'week6-9', 'text': 'week6 \n 任務一 \n 1.利用solovespace繪製雙輪車 \n 2.建立雙輪車所需零件並組合 \n \n 任務二 \n 1.下載 \xa0 V-rep 3.6.1 rev 4.7z 和 \xa0 web_vrep2.zip \n 2. 利用 V-rep 3.6.1 rev4 與隨身程式執行系統, 完成網際 V-rep 模型控制 \n \n 任務三 \n 1. 用編輯器開啟在web_vrep2資料夾 templates 中的 controls.html \n 2.新增start 和stop的按鈕 \n \xa0 \xa0 指令:<td><a class="pure-button pure-button-primary" href="/do/start">start</a></td><a class="pure-button pure-button-primary" href="/do/stop">stop</a></td> \n 3.在同樣的資料夾用編輯器開啟 vrep_linefollower 定義其中開始和結束按鈕 \n \xa0 \xa0 \xa0指令:if direction == \'start\': \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0vrep.simxStartSimulation(self.clientID, vrep.simx_opmode_oneshot) \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0elif direction == \'stop\': \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0vrep.simxStopSimulation(self.clientID, vrep.simx_opmode_oneshot) \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0else :(把原本定義上下左右的指令接到後面) \n 4.打開 vrep.exe 並且用編輯器打開 app.py 並執行，就能在網際控制模組進行start和stop \n \n week7 \n 任務一 \n 1.修改solvespace.cpp檔(solvespace\\src) \n 2.刪除 solvespace.cpp.obj檔(solvespace\\build\\src\\CMakeFiles) \n 3.在build重新執行mingw32-make(solvespace\\build) \n \n 任務二 \n solvespace繪圖驗證 \n 題目一 \n \n 完成圖 \n', 'tags': '', 'url': 'week6-9.html'}, {'title': 'week10-14', 'text': '', 'tags': '', 'url': 'week10-14.html'}, {'title': 'week15-18', 'text': '', 'tags': '', 'url': 'week15-18.html'}, {'title': 'Note', 'text': '', 'tags': '', 'url': 'Note.html'}, {'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules \xa0 https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.', 'tags': '', 'url': 'Develop.html'}]};